{"ast":null,"code":"var _jsxFileName = \"/Users/parthpathak/Documents/todo/src/components/TaskList/TaskItem/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Divider from \"@material-ui/core/Divider\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport uuid from \"uuid/v4\";\nimport SelectedDialog from \"../../SelectDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    paddingLeft: 0\n  }\n}));\nconst menuOptions = [\"Labels\"];\n\nconst TaskItem = _ref => {\n  _s();\n\n  let {\n    dispatch,\n    task,\n    labels\n  } = _ref;\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n  const [drawerMobileOpen, setDrawerMobileOpen] = useState(false);\n  useEffect(() => {\n    const disable = task.completed || task.deleted;\n    setDisabled(disable);\n  }, [task.completed, task.deleted]);\n\n  const handleClickCheckBox = () => {\n    dispatch({\n      type: task.completed ? \"UNDO_TODO\" : \"DO_TODO\",\n      id: task.id\n    });\n  };\n\n  const handleClickDelete = () => {\n    dispatch({\n      type: \"DELETE_TODO\",\n      id: task.id\n    });\n  };\n\n  const handleClickMore = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuMoreClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    setOpenDialog(true);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleSubmitEdits = event => {\n    const updatedTodos = [task].map(task => {\n      if (task.name === event) {\n        task.text = editingText;\n      }\n\n      return task;\n    });\n    dispatch(updatedTodos);\n    setTodoEditing(null);\n    console.log(task);\n  };\n\n  const handleDrawerToggle = task => {\n    setDrawerMobileOpen(!drawerMobileOpen);\n    setTodoEditing(task.id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      dense: true,\n      className: classes.listItem,\n      disabled: disabled,\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          edge: \"start\",\n          tabIndex: -1,\n          onClick: handleClickCheckBox,\n          checked: disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"display more actions\",\n        edge: \"end\",\n        color: \"inherit\",\n        onClick: handleClickMore,\n        children: /*#__PURE__*/_jsxDEV(MoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        id: \"lock-menu\",\n        anchorEl: anchorEl,\n        keepMounted: true,\n        open: Boolean(anchorEl),\n        onClose: handleClose,\n        children: menuOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MenuItem, {\n            onClick: () => handleMenuMoreClick(index),\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)\n        }, uuid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SelectedDialog, {\n        openDialog: openDialog,\n        handleClose: handleCloseDialog,\n        title: menuOptions[selectedIndex],\n        dispatch: dispatch,\n        taskId: task.id,\n        labels: labels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: [/*#__PURE__*/_jsxDEV(EditIcon, {\n          onClick: () => handleDrawerToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), task.id === todoEditing && drawerMobileOpen ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setEditingText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: task.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this), task.id === todoEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSubmitEdits(task.id),\n          children: \"Submit Edits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTodoEditing(task.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n        onClick: handleClickDelete,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"end\",\n          \"aria-label\": \"delete\",\n          children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskItem, \"4/SN6JMs8Fwlu+ALQxFbwtGkfMU=\", false, function () {\n  return [useStyles];\n});\n\n_c = TaskItem;\nexport default TaskItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"sources":["/Users/parthpathak/Documents/todo/src/components/TaskList/TaskItem/index.js"],"names":["React","Fragment","useState","useEffect","useRef","makeStyles","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","DeleteForeverIcon","IconButton","Divider","MoreIcon","Menu","MenuItem","Grid","EditIcon","uuid","SelectedDialog","useStyles","listItem","paddingLeft","menuOptions","TaskItem","dispatch","task","labels","classes","anchorEl","setAnchorEl","openDialog","setOpenDialog","selectedIndex","setSelectedIndex","disabled","setDisabled","todoEditing","setTodoEditing","editingText","setEditingText","drawerMobileOpen","setDrawerMobileOpen","disable","completed","deleted","handleClickCheckBox","type","id","handleClickDelete","handleClickMore","event","currentTarget","handleMenuMoreClick","index","handleClose","handleCloseDialog","handleSubmitEdits","updatedTodos","map","name","text","console","log","handleDrawerToggle","Boolean","option","e","target","value"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect ,useRef} from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Divider from \"@material-ui/core/Divider\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport uuid from \"uuid/v4\";\n\nimport SelectedDialog from \"../../SelectDialog\";\n\n\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    paddingLeft: 0\n  }\n}));\n\nconst menuOptions = [\"Labels\"];\n\nconst TaskItem = ({ dispatch, task, labels}) => {\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const [disabled, setDisabled] = useState(false);\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n  const [drawerMobileOpen, setDrawerMobileOpen] = useState(false);\n\n\n\n  useEffect(() => {\n    const disable = task.completed || task.deleted;\n    setDisabled(disable);\n  }, [task.completed, task.deleted]);\n\n  const handleClickCheckBox = () => {\n    dispatch({ type: task.completed ? \"UNDO_TODO\" : \"DO_TODO\", id: task.id });\n  };\n\n  const handleClickDelete = () => {\n    dispatch({ type: \"DELETE_TODO\", id: task.id });\n  };\n\n  const handleClickMore = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuMoreClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    setOpenDialog(true);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const handleSubmitEdits = event => {\n    const updatedTodos = [task].map((task) => {\n      if (task.name === event) {\n        task.text = editingText;\n      }\n      return task;\n    });\n    dispatch(updatedTodos);\n    setTodoEditing(null);\n    console.log(task);\n  }\n  const handleDrawerToggle = (task) => {\n    setDrawerMobileOpen(!drawerMobileOpen);\n    setTodoEditing(task.id);\n  };\n  \n  \n  return (\n    <Fragment>\n      <ListItem dense className={classes.listItem} disabled={disabled}>\n        <ListItemIcon>\n          <Checkbox\n            edge=\"start\"\n            tabIndex={-1}\n            onClick={handleClickCheckBox}\n            checked={disabled}\n          />\n        </ListItemIcon>\n        <ListItemText primary={task.name} />\n        <IconButton\n          aria-label=\"display more actions\"\n          edge=\"end\"\n          color=\"inherit\"\n          onClick={handleClickMore}\n        >\n          <MoreIcon />\n        </IconButton>\n        <Menu\n          id=\"lock-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {menuOptions.map((option, index) => (\n            <div key={uuid()}>\n              <MenuItem onClick={() => handleMenuMoreClick( index)}>\n                {option}\n              </MenuItem>\n            </div>\n          ))}\n        </Menu>\n        <SelectedDialog\n          openDialog={openDialog}\n          handleClose={handleCloseDialog}\n          title={menuOptions[selectedIndex]}\n          dispatch={dispatch}\n          taskId={task.id}\n          labels={labels}\n        />\n        <IconButton>\n          <EditIcon onClick ={() => handleDrawerToggle}></EditIcon>\n           {task.id === todoEditing &&  drawerMobileOpen ? (\n\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{task.text}</div>\n            )}\n          \n            {task.id === todoEditing ? (\n              <button onClick={() => handleSubmitEdits(task.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(task.id)}>Edit</button>\n            )}\n        </IconButton>\n       \n\n\n        <ListItemSecondaryAction onClick={handleClickDelete}>\n          <IconButton edge=\"end\" aria-label=\"delete\">\n            <DeleteForeverIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n        \n      </ListItem>\n      <Divider />\n    </Fragment>\n  );\n};\n\nexport default TaskItem;\n"]},"metadata":{},"sourceType":"module"}