{"ast":null,"code":"var _jsxFileName = \"/Users/parthpathak/Documents/todo/src/components/TaskList/TaskItem/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Divider from \"@material-ui/core/Divider\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport uuid from \"uuid/v4\";\nimport SelectedDialog from \"../../SelectDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    paddingLeft: 0\n  }\n}));\nconst menuOptions = [\"Labels\"];\n\nconst TaskItem = _ref => {\n  _s();\n\n  let {\n    dispatch,\n    task,\n    labels,\n    setTask\n  } = _ref;\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n  const [drawerMobileOpen, setDrawerMobileOpen] = useState(false);\n  const [editable, setEditable] = useState(false);\n  console.log(todo);\n  const [name, setName] = useState(task.id);\n  useEffect(() => {\n    const disable = task.completed || task.deleted;\n    setDisabled(disable);\n  }, [task.completed, task.deleted]);\n\n  const handleClickCheckBox = () => {\n    dispatch({\n      type: task.completed ? \"UNDO_TODO\" : \"DO_TODO\",\n      id: task.id\n    });\n  };\n\n  const handleClickDelete = () => {\n    dispatch({\n      type: \"DELETE_TODO\",\n      id: task.id\n    });\n  };\n\n  const handleClickMore = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuMoreClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    setOpenDialog(true);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const updateTodo = task => {\n    dispatch({\n      type: \"UPDATE_TODO\",\n      id: task.id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      dense: true,\n      className: classes.listItem,\n      disabled: disabled,\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          edge: \"start\",\n          tabIndex: -1,\n          onClick: handleClickCheckBox,\n          checked: disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"display more actions\",\n        edge: \"end\",\n        color: \"inherit\",\n        onClick: handleClickMore,\n        children: /*#__PURE__*/_jsxDEV(MoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        id: \"lock-menu\",\n        anchorEl: anchorEl,\n        keepMounted: true,\n        open: Boolean(anchorEl),\n        onClose: handleClose,\n        children: menuOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MenuItem, {\n            onClick: () => handleMenuMoreClick(index),\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)\n        }, uuid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SelectedDialog, {\n        openDialog: openDialog,\n        handleClose: handleCloseDialog,\n        title: menuOptions[selectedIndex],\n        dispatch: dispatch,\n        taskId: task.id,\n        labels: labels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"#\", task.id.length > 1 ? task.id[2] : task.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: editable ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Write text...\",\n          value: name,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 7\n        }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary m-2\",\n        onClick: () => {\n          dispatch(updateTodo({ ...task,\n            id: task.id\n          }));\n\n          if (editable) {\n            setName(task.name);\n          }\n\n          setEditable(!editable);\n        },\n        children: editable ? \"Update\" : \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n        onClick: handleClickDelete,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"end\",\n          \"aria-label\": \"delete\",\n          children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskItem, \"pYzzwGMuIfZuAt8NWTG+v3etSaQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = TaskItem;\nexport default TaskItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"sources":["/Users/parthpathak/Documents/todo/src/components/TaskList/TaskItem/index.js"],"names":["React","Fragment","useState","useEffect","useRef","makeStyles","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","DeleteForeverIcon","IconButton","Divider","MoreIcon","Menu","MenuItem","Grid","EditIcon","uuid","SelectedDialog","useStyles","listItem","paddingLeft","menuOptions","TaskItem","dispatch","task","labels","setTask","classes","anchorEl","setAnchorEl","openDialog","setOpenDialog","selectedIndex","setSelectedIndex","disabled","setDisabled","todoEditing","setTodoEditing","editingText","setEditingText","drawerMobileOpen","setDrawerMobileOpen","editable","setEditable","console","log","todo","name","setName","id","disable","completed","deleted","handleClickCheckBox","type","handleClickDelete","handleClickMore","event","currentTarget","handleMenuMoreClick","index","handleClose","handleCloseDialog","updateTodo","Boolean","map","option","length","e","target","value"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect ,useRef} from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Divider from \"@material-ui/core/Divider\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport uuid from \"uuid/v4\";\n\nimport SelectedDialog from \"../../SelectDialog\";\n\n\n\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    paddingLeft: 0\n  }\n}));\n\nconst menuOptions = [\"Labels\"];\n\nconst TaskItem = ({ dispatch, task, labels, setTask}) => {\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const [disabled, setDisabled] = useState(false);\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n  const [drawerMobileOpen, setDrawerMobileOpen] = useState(false);\n  const [editable, setEditable] = useState(false);\n\tconsole.log(todo);\n\tconst [name, setName] = useState(task.id);\n\n\n\n\n  useEffect(() => {\n    const disable = task.completed || task.deleted;\n    setDisabled(disable);\n  }, [task.completed, task.deleted]);\n\n  const handleClickCheckBox = () => {\n    dispatch({ type: task.completed ? \"UNDO_TODO\" : \"DO_TODO\", id: task.id });\n  };\n\n  const handleClickDelete = () => {\n    dispatch({ type: \"DELETE_TODO\", id: task.id });\n  };\n\n  const handleClickMore = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuMoreClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    setOpenDialog(true);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const  updateTodo =(task) => {\n    dispatch( {\n      type: \"UPDATE_TODO\", id: task.id })\n  };\n  \n  \n  return (\n    <Fragment>\n      <ListItem dense className={classes.listItem} disabled={disabled}>\n        <ListItemIcon>\n          <Checkbox\n            edge=\"start\"\n            tabIndex={-1}\n            onClick={handleClickCheckBox}\n            checked={disabled}\n          />\n        </ListItemIcon>\n        <ListItemText primary={task.name} />\n        <IconButton\n          aria-label=\"display more actions\"\n          edge=\"end\"\n          color=\"inherit\"\n          onClick={handleClickMore}\n        >\n          <MoreIcon />\n        </IconButton>\n        <Menu\n          id=\"lock-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {menuOptions.map((option, index) => (\n            <div key={uuid()}>\n              <MenuItem onClick={() => handleMenuMoreClick( index)}>\n                {option}\n              </MenuItem>\n            </div>\n          ))}\n        </Menu>\n        <SelectedDialog\n          openDialog={openDialog}\n          handleClose={handleCloseDialog}\n          title={menuOptions[selectedIndex]}\n          dispatch={dispatch}\n          taskId={task.id}\n          labels={labels}\n        />\n        <div>#{task.id.length > 1 ? task.id[2] : task.id}</div>\n\t\t\t\t<div className=\"col\">\n\t\t\t\t\t{editable ?\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Write text...\" value={name} onChange={(e)=> setName(e.target.value)} />\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<h4>{task.name}</h4>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={()=> {\n\t\t\t\t\tdispatch(updateTodo({\n\t\t\t\t\t\t...task,\n\t\t\t\t\t\tid: task.id\n\t\t\t\t\t}));\n\t\t\t\t\tif(editable) {\n\t\t\t\t\t\tsetName(task.name);\n\t\t\t\t\t}\n\t\t\t\t\tsetEditable(!editable);\n\t\t\t\t}}>\n\t\t\t\t\t{editable ? \"Update\" : \"Edit\"}\n\t\t\t\t</button>\n       \n\n\n        <ListItemSecondaryAction onClick={handleClickDelete}>\n          <IconButton edge=\"end\" aria-label=\"delete\">\n            <DeleteForeverIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n        \n      </ListItem>\n      <Divider />\n    </Fragment>\n  );\n};\n\nexport default TaskItem;\n"]},"metadata":{},"sourceType":"module"}