{"ast":null,"code":"var _jsxFileName = \"/Users/parthpathak/Documents/todo/src/components/AddProject.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Task } from \"./Task\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddProject = () => {\n  _s();\n\n  const [prolist, setproList] = React.useState([]);\n  const [project, setProject] = React.useState(\"\");\n  const [showProjects, setShowProjects] = useState([]);\n  const [projectEditing, setProjectEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  const addProject1 = () => {\n    setShowProjects(showProjects => [...showProjects, /*#__PURE__*/_jsxDEV(Task, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 55\n    }, this)]);\n  };\n\n  function handleSubmit1(e) {\n    e.preventDefault();\n    const newproject = {\n      id1: new Date().getTime(),\n      text: project,\n      completed: false\n    };\n    setproList([...prolist].concat(newproject));\n    setProject(\"\");\n  }\n\n  function deleteproject1(id) {\n    let updatedprolist = [...prolist].filter(project => project.id !== id);\n    setproList(updatedprolist);\n  }\n\n  function toggleComplete1(id) {\n    let updatedprolist = [...prolist].map(project => {\n      if (project.id === id) {\n        project.completed = !project.completed;\n      }\n\n      return project;\n    });\n    setproList(updatedprolist);\n  }\n\n  function submitEdits1(id) {\n    const updatedprolist = [...prolist].map(project => {\n      if (project.id === id) {\n        project.text = editingText;\n      }\n\n      return project;\n    });\n    setproList(updatedprolist);\n    setProjectEditing(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"project-prolist\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"project list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit1,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text1\",\n        onChange: e => setProject(e.target.value),\n        value: project\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit1\",\n        children: [\"Add Project\", Task]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), prolist.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-text1\",\n        type: \"checkbox1\",\n        id: \"complete\",\n        checked: project.completed,\n        onChange: () => toggleComplete1(project.id) //style={{textDecoration : project.id ? \"line-through\": \"\"}}\n        ,\n        children: project.id === projectEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text1\",\n          onChange: e => setEditingText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: project.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-actions\",\n        children: [project.id === projectEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitEdits1(project.id),\n          children: \"Submit Edits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setProjectEditing(project.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteproject1(project.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addProject1(project.id),\n          children: \"Todo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, project.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AddProject, \"U/N9+BTV9+tuyOAe+pyWuF+PgAg=\");\n\n_c = AddProject;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProject\");","map":{"version":3,"sources":["/Users/parthpathak/Documents/todo/src/components/AddProject.js"],"names":["React","useState","useEffect","Task","AddProject","prolist","setproList","project","setProject","showProjects","setShowProjects","projectEditing","setProjectEditing","editingText","setEditingText","addProject1","handleSubmit1","e","preventDefault","newproject","id1","Date","getTime","text","completed","concat","deleteproject1","id","updatedprolist","filter","toggleComplete1","map","submitEdits1","target","value"],"mappings":"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","sourcesContent":["import React ,{useState ,useEffect} from \"react\";\nimport { Task } from \"./Task\";\n\nexport const AddProject = () => {\n    const [prolist, setproList] = React.useState([]);\n    const [project, setProject] = React.useState(\"\");\n    const [showProjects, setShowProjects] = useState([]);\n    const [projectEditing, setProjectEditing] = useState(null);\n    const [editingText, setEditingText] = useState(\"\");\n\n    const addProject1 = () => {\n      setShowProjects(showProjects =>[...showProjects,<Task/>])\n    }\n  \n   \n    function handleSubmit1(e) {\n      e.preventDefault();\n  \n      const newproject = {\n        id1: new Date().getTime(),\n        text: project,\n        completed: false,\n      };\n      setproList([...prolist].concat(newproject));\n      setProject(\"\");\n    }\n  \n    function deleteproject1(id) {\n      let updatedprolist = [...prolist].filter((project) => project.id !== id);\n      setproList(updatedprolist);\n    }\n  \n    function toggleComplete1(id) {\n      let updatedprolist = [...prolist].map((project) => {\n        if (project.id === id) {\n          project.completed = !project.completed;\n        }\n        return project;\n      });\n      setproList(updatedprolist);\n    }\n  \n    function submitEdits1(id) {\n      const updatedprolist = [...prolist].map((project) => {\n        if (project.id === id) {\n          project.text = editingText;\n        }\n        return project;\n      });\n      setproList(updatedprolist);\n      setProjectEditing(null);\n    }\n  \n    return (\n      <div id=\"project-prolist\">\n        <h1>project list</h1>\n        <form onSubmit={handleSubmit1}>\n          <input\n            type=\"text1\"\n            onChange={(e) => setProject(e.target.value)}\n            value={project}\n          />\n          <button type=\"submit1\">Add Project{Task}</button>\n        </form>\n        {prolist.map((project) => (\n          <div key={project.id} className=\"project\">\n            <div className=\"project-text1\"\n                type=\"checkbox1\"\n                id=\"complete\"\n                checked={project.completed}\n                onChange={() => toggleComplete1(project.id)}\n                //style={{textDecoration : project.id ? \"line-through\": \"\"}}\n              >\n              {project.id === projectEditing ? (\n                <input\n                  type=\"text1\"\n                  onChange={(e) => setEditingText(e.target.value)}\n                />\n              ) : (\n                <div>{project.text}</div>\n              )}\n            </div>\n            <div className=\"project-actions\">\n              {project.id === projectEditing ? (\n                <button onClick={() => submitEdits1(project.id)}>Submit Edits</button>\n              ) : (\n                <button onClick={() => setProjectEditing(project.id)}>Edit</button>\n              )}\n  \n              <button onClick={() => deleteproject1(project.id)}>Delete</button>\n              <button onClick={()=> addProject1(project.id)}>Todo List</button>\n              \n            </div>\n            \n          </div>\n          ))}\n      </div>\n    );\n  };\n  \n  \n  \n"]},"metadata":{},"sourceType":"module"}