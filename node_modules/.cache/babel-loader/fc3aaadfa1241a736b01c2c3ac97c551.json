{"ast":null,"code":"var _jsxFileName = \"/Users/parthpathak/Documents/todo/src/components/Task.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Task = () => {\n  _s();\n\n  const [list, setList] = React.useState([]);\n  const [todo, setTodo] = React.useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n  useEffect(() => {\n    const json = localStorage.getItem(\"list\");\n    const loadedlist = JSON.parse(json);\n\n    if (loadedlist) {\n      setList(loadedlist);\n    }\n  }, []);\n  useEffect(() => {\n    const json = JSON.stringify(list);\n    localStorage.setItem(\"list\", json);\n  }, [list]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false\n    };\n    setList([...list].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedlist = [...list].filter(todo => todo.id !== id);\n    setList(updatedlist);\n  }\n\n  function toggleComplete(id) {\n    let updatedlist = [...list].map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    });\n    setList(updatedlist);\n  }\n\n  function submitEdits(id) {\n    const updatedlist = [...list].map(todo => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n\n      return todo;\n    });\n    setList(updatedlist);\n    setTodoEditing(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    \"data-testid\": \"tasks\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"todo-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setTodo(e.target.value),\n          value: todo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), list.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"completed\",\n            checked: todo.completed,\n            onChange: () => toggleComplete(todo.id),\n            style: {\n              textDecoration: todo.id ? \"line-through\" : \"\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), todo.id === todoEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setEditingText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: todo.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-actions\",\n          children: [todo.id === todoEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => submitEdits(todo.id),\n            children: \"Submit Edits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setTodoEditing(todo.id),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteTodo(todo.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Task, \"7j/Ly3MQA6yJwdDrIleKt8R75+c=\");\n\n_c = Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/parthpathak/Documents/todo/src/components/Task.js"],"names":["React","useState","useEffect","Task","list","setList","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","json","localStorage","getItem","loadedlist","JSON","parse","stringify","setItem","handleSubmit","e","preventDefault","newTodo","id","Date","getTime","text","completed","concat","deleteTodo","updatedlist","filter","toggleComplete","map","submitEdits","target","value","textDecoration"],"mappings":"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","sourcesContent":["import React ,{useState ,useEffect} from \"react\";\n\nexport const Task = () => {\n    const [list, setList] = React.useState([]);\n    const [todo, setTodo] = React.useState(\"\");\n    const [todoEditing, setTodoEditing] = useState(null);\n    const [editingText, setEditingText] = useState(\"\");\n  \n    useEffect(() => {\n      const json = localStorage.getItem(\"list\");\n      const loadedlist = JSON.parse(json);\n      if (loadedlist) {\n        setList(loadedlist);\n      }\n    }, []);\n  \n    useEffect(() => {\n      const json = JSON.stringify(list);\n      localStorage.setItem(\"list\", json);\n    }, [list]);\n  \n    function handleSubmit(e) {\n      e.preventDefault();\n  \n      const newTodo = {\n        id: new Date().getTime(),\n        text: todo,\n        completed: false,\n      };\n      setList([...list].concat(newTodo));\n      setTodo(\"\");\n    }\n  \n    function deleteTodo(id) {\n      let updatedlist = [...list].filter((todo) => todo.id !== id);\n      setList(updatedlist);\n    }\n  \n    function toggleComplete(id) {\n      let updatedlist = [...list].map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      setList(updatedlist);\n    }\n  \n    function submitEdits(id) {\n      const updatedlist = [...list].map((todo) => {\n        if (todo.id === id) {\n          todo.text = editingText;\n        }\n        return todo;\n      });\n      setList(updatedlist);\n      setTodoEditing(null);\n    }\n  \n    return (\n<div className=\"tasks\" data-testid=\"tasks\">\n      <div id=\"todo-list\">\n        <h1>Todo List</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={(e) => setTodo(e.target.value)}\n            value={todo}\n          />\n          <button type=\"submit\">Add Task</button>\n        </form>\n        {list.map((todo) => (\n          <div key={todo.id} className=\"todo\">\n            <div className=\"todo-text\">\n              <input\n                type=\"checkbox\"\n                id=\"completed\"\n                checked={todo.completed}\n                onChange={() => toggleComplete(todo.id)}\n                style={{textDecoration : todo.id ? \"line-through\": \"\"}}\n              />\n              {todo.id === todoEditing ? (\n                <input\n                  type=\"text\"\n                  onChange={(e) => setEditingText(e.target.value)}\n                />\n              ) : (\n                <div>{todo.text}</div>\n              )}\n            </div>\n            <div className=\"todo-actions\">\n              {todo.id === todoEditing ? (\n                <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n              ) : (\n                <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n              )}\n  \n              <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n            </div>\n          </div>\n          ))}\n      </div>\n      </div>\n    );\n  };\n  \n  \n  \n"]},"metadata":{},"sourceType":"module"}