{"ast":null,"code":"var _jsxFileName = \"/Users/parthpathak/Documents/todo/src/components/TaskList/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport uuid from \"uuid/v4\";\nimport TaskItem from \"./TaskItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskList = _ref => {\n  _s();\n\n  let {\n    tasks,\n    filter,\n    dispatch,\n    selected,\n    menuItems\n  } = _ref;\n  // Filter task according to the filter state\n  const [filteredTask, setFilteredTask] = useState([]);\n  useEffect(() => {\n    let selectedTasks = [];\n\n    if (selected.menu == \"PROJECT\") {\n      selectedTasks = tasks.filter(task => task.projectId === selected.id);\n    } else if (selected.menu == \"LABEL\") {\n      selectedTasks = tasks.filter(task => task.labelId === selected.id);\n    }\n\n    const incompleteTasks = selectedTasks.filter(task => !task.completed && !task.deleted);\n    const completeTasks = selectedTasks.filter(task => task.completed && !task.deleted);\n\n    switch (filter) {\n      case \"ALL\":\n        // Show the complete tasks at the end.\n        setFilteredTask([...incompleteTasks, ...completeTasks]);\n        break;\n\n      case \"INCOMPLETE\":\n        setFilteredTask(incompleteTasks);\n        break;\n\n      default:\n        throw new Error();\n    }\n  }, [filter, selected.id, tasks, selected.menu]);\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: filteredTask.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n      dispatch: dispatch,\n      task: task,\n      labels: menuItems.filter(item => item.menu == \"LABEL\")\n    }, uuid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskList, \"/B3k985hW7N4WHWhd9SSTiPhZ2k=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/parthpathak/Documents/todo/src/components/TaskList/index.js"],"names":["React","useState","useEffect","List","uuid","TaskItem","TaskList","tasks","filter","dispatch","selected","menuItems","filteredTask","setFilteredTask","selectedTasks","menu","task","projectId","id","labelId","incompleteTasks","completed","deleted","completeTasks","Error","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,QAAQ,GAAG,QAAsD;AAAA;;AAAA,MAArD;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA;AAArC,GAAqD;AACrE;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,aAAa,GAAG,EAApB;;AACA,QAAIJ,QAAQ,CAACK,IAAT,IAAiB,SAArB,EAAgC;AAC9BD,MAAAA,aAAa,GAAGP,KAAK,CAACC,MAAN,CAAaQ,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmBP,QAAQ,CAACQ,EAAjD,CAAhB;AACD,KAFD,MAEO,IAAIR,QAAQ,CAACK,IAAT,IAAiB,OAArB,EAA8B;AACnCD,MAAAA,aAAa,GAAGP,KAAK,CAACC,MAAN,CAAaQ,IAAI,IAAIA,IAAI,CAACG,OAAL,KAAiBT,QAAQ,CAACQ,EAA/C,CAAhB;AACD;;AAED,UAAME,eAAe,GAAGN,aAAa,CAACN,MAAd,CACtBQ,IAAI,IAAI,CAACA,IAAI,CAACK,SAAN,IAAmB,CAACL,IAAI,CAACM,OADX,CAAxB;AAIA,UAAMC,aAAa,GAAGT,aAAa,CAACN,MAAd,CACpBQ,IAAI,IAAIA,IAAI,CAACK,SAAL,IAAkB,CAACL,IAAI,CAACM,OADZ,CAAtB;;AAIA,YAAQd,MAAR;AACE,WAAK,KAAL;AACE;AACAK,QAAAA,eAAe,CAAC,CAAC,GAAGO,eAAJ,EAAqB,GAAGG,aAAxB,CAAD,CAAf;AACA;;AACF,WAAK,YAAL;AACEV,QAAAA,eAAe,CAACO,eAAD,CAAf;AACA;;AACF;AACE,cAAM,IAAII,KAAJ,EAAN;AATJ;AAWD,GA3BQ,EA2BN,CAAChB,MAAD,EAASE,QAAQ,CAACQ,EAAlB,EAAsBX,KAAtB,EAA6BG,QAAQ,CAACK,IAAtC,CA3BM,CAAT;AA6BA,sBACE,QAAC,IAAD;AAAA,cACGH,YAAY,CAACa,GAAb,CAAiBT,IAAI,iBACpB,QAAC,QAAD;AAEE,MAAA,QAAQ,EAAEP,QAFZ;AAGE,MAAA,IAAI,EAAEO,IAHR;AAIE,MAAA,MAAM,EAAEL,SAAS,CAACH,MAAV,CAAiBkB,IAAI,IAAIA,IAAI,CAACX,IAAL,IAAa,OAAtC;AAJV,OACOX,IAAI,EADX;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA7CD;;GAAME,Q;;KAAAA,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport List from \"@material-ui/core/List\";\nimport uuid from \"uuid/v4\";\n\nimport TaskItem from \"./TaskItem\";\n\nconst TaskList = ({ tasks, filter, dispatch, selected, menuItems }) => {\n  // Filter task according to the filter state\n  const [filteredTask, setFilteredTask] = useState([]);\n  \n  useEffect(() => {\n    let selectedTasks = [];\n    if (selected.menu == \"PROJECT\") {\n      selectedTasks = tasks.filter(task => task.projectId === selected.id);\n    } else if (selected.menu == \"LABEL\") {\n      selectedTasks = tasks.filter(task => task.labelId === selected.id);\n    }\n\n    const incompleteTasks = selectedTasks.filter(\n      task => !task.completed && !task.deleted\n    );\n\n    const completeTasks = selectedTasks.filter(\n      task => task.completed && !task.deleted\n    );\n\n    switch (filter) {\n      case \"ALL\":\n        // Show the complete tasks at the end.\n        setFilteredTask([...incompleteTasks, ...completeTasks]);\n        break;\n      case \"INCOMPLETE\":\n        setFilteredTask(incompleteTasks);\n        break;\n      default:\n        throw new Error();\n    }\n  }, [filter, selected.id, tasks, selected.menu]);\n\n  return (\n    <List>\n      {filteredTask.map(task => (\n        <TaskItem\n          key={uuid()}\n          dispatch={dispatch}\n          task={task} \n          labels={menuItems.filter(item => item.menu == \"LABEL\")}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}